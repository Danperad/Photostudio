// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhotostudioDLL;

#nullable disable

namespace PhotostudioDLL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220108101837_addMigration")]
    partial class addMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EquipmentInventory", b =>
                {
                    b.Property<int>("EquipmentID")
                        .HasColumnType("integer");

                    b.Property<int>("InventoriesID")
                        .HasColumnType("integer");

                    b.HasKey("EquipmentID", "InventoriesID");

                    b.HasIndex("InventoriesID");

                    b.ToTable("EquipmentInventory");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("EMail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("ID");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstName = "Анатолий",
                            IsActive = false,
                            LastName = "Берёзов",
                            PhoneNumber = "+78652198674"
                        },
                        new
                        {
                            ID = 2,
                            FirstName = "Василий",
                            IsActive = false,
                            LastName = "Зубьянинко",
                            MiddleName = "Егорович",
                            PhoneNumber = "+75352109785"
                        },
                        new
                        {
                            ID = 3,
                            EMail = "email@mail.ru",
                            FirstName = "Иван",
                            IsActive = false,
                            LastName = "Кислицин",
                            MiddleName = "Ильич",
                            PhoneNumber = "+79621475203"
                        });
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Contract", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<int>("ClientID")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("OrderID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("EMail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly>("EmploymentDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PassData")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EMail")
                        .IsUnique();

                    b.HasIndex("PassData")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EmploymentDate = new DateOnly(2022, 1, 8),
                            FirstName = "Вячеслав",
                            LastName = "Берёзов",
                            PassData = "6024978234",
                            PhoneNumber = "+78005553535",
                            RoleID = 1
                        },
                        new
                        {
                            ID = 2,
                            EmploymentDate = new DateOnly(2021, 11, 21),
                            FirstName = "Иван",
                            LastName = "Власов",
                            MiddleName = "Валентинович",
                            PassData = "6852432107",
                            PhoneNumber = "+76985324710",
                            RoleID = 2
                        },
                        new
                        {
                            ID = 3,
                            EmploymentDate = new DateOnly(2021, 11, 21),
                            FirstName = "Кирилл",
                            LastName = "Кириллов",
                            PassData = "6521452089",
                            PhoneNumber = "+72036874512",
                            RoleID = 7
                        });
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.EmployeeProfile", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("ID");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("EmployeeProfile");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Login = "admin",
                            Password = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"
                        },
                        new
                        {
                            ID = 2,
                            Login = "photo",
                            Password = "55c64d0fcd6f9d5f7c828093857e3fdfda68478bb4e9bd24d481ef391c7804e8"
                        },
                        new
                        {
                            ID = 3,
                            Login = "manager",
                            Password = "03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4"
                        });
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Equipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Hall", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Hall");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Appointment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServiceID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("integer");

                    b.Property<int>("ContractID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.RentedItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("ID");

                    b.ToTable("RentedItem");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rights")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Responsibilities = "Добавлять новые услуги, новые должности и новых сотрудники (по мере необходимости)",
                            Rights = "Доступ ко всем данным",
                            Title = "Администратор"
                        },
                        new
                        {
                            ID = 2,
                            Responsibilities = "Фотографировать согласно услуге",
                            Rights = "Доступ к предоставляемым им услугам, и инвентарю услуги",
                            Title = "Фотограф"
                        },
                        new
                        {
                            ID = 3,
                            Responsibilities = "Обрабатывать фотогафии согласно услуге",
                            Rights = "Доступ к предоставляемым им услугам, и данным фотографиям",
                            Title = "Ретушер"
                        },
                        new
                        {
                            ID = 4,
                            Responsibilities = "Снимать видеоматериалы согласно услуге",
                            Rights = "Доступ к предоставляемым им услугам, и инвентарю услуги",
                            Title = "Оператор"
                        },
                        new
                        {
                            ID = 5,
                            Responsibilities = "Обрабатывать видеоматериалы согласно услуге",
                            Rights = "Доступ к предоставляемым им услугам, и данным видеоматериалами",
                            Title = "Монтажер"
                        },
                        new
                        {
                            ID = 6,
                            Responsibilities = "Видоизменять клиента, согласно заявке",
                            Rights = "Доступ к предоставляемым им услугам, и инвентарю услуги",
                            Title = "Стилист"
                        },
                        new
                        {
                            ID = 7,
                            Responsibilities = "Создавать новые заявки и новых клиентов",
                            Rights = "Доступ к клиентам, услугам и арендуемым вещам",
                            Title = "Менеджер"
                        });
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.ExecuteableService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndRent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HallID")
                        .HasColumnType("integer");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("OrderID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PhotoEndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhotoLocation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PhotoStartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RentedItemID")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartRent")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("HallID");

                    b.HasIndex("OrderID");

                    b.HasIndex("RentedItemID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ExecuteableService");
                });

            modelBuilder.Entity("EquipmentInventory", b =>
                {
                    b.HasOne("PhotostudioDLL.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotostudioDLL.Entities.Inventory", null)
                        .WithMany()
                        .HasForeignKey("InventoriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Contract", b =>
                {
                    b.HasOne("PhotostudioDLL.Entities.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotostudioDLL.Entities.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotostudioDLL.Entities.Order", "Order")
                        .WithOne("Contract")
                        .HasForeignKey("PhotostudioDLL.Entities.Contract", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Employee", b =>
                {
                    b.HasOne("PhotostudioDLL.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.EmployeeProfile", b =>
                {
                    b.HasOne("PhotostudioDLL.Entities.Employee", "Employee")
                        .WithOne("Profile")
                        .HasForeignKey("PhotostudioDLL.Entities.EmployeeProfile", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Inventory", b =>
                {
                    b.HasOne("PhotostudioDLL.Entities.Service", "Service")
                        .WithMany("Inventories")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Order", b =>
                {
                    b.HasOne("PhotostudioDLL.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.ExecuteableService", b =>
                {
                    b.HasOne("PhotostudioDLL.Entities.Employee", "Employee")
                        .WithMany("Services")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotostudioDLL.Entities.Hall", "Hall")
                        .WithMany("Services")
                        .HasForeignKey("HallID");

                    b.HasOne("PhotostudioDLL.Entities.Order", "Order")
                        .WithMany("Services")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotostudioDLL.Entities.RentedItem", "RentedItem")
                        .WithMany()
                        .HasForeignKey("RentedItemID");

                    b.HasOne("PhotostudioDLL.Entities.Service", "Service")
                        .WithMany("ExecuteableServices")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Hall");

                    b.Navigation("Order");

                    b.Navigation("RentedItem");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Client", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Employee", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Services");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Hall", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Order", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();

                    b.Navigation("Services");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PhotostudioDLL.Entities.Service", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("ExecuteableServices");
                });
#pragma warning restore 612, 618
        }
    }
}
